version: '3'

services:
  app:
    build: .
    image: &app app
    container_name: pbp_challenge_backend_django
    restart: unless-stopped
    command: ./wait-for-it.sh db:5432 -- gunicorn pbp_challenge.wsgi:application --workers 16 --timeout 150 --worker-class gevent --bind 0.0.0.0:8000
    env_file:
      - ./.env.staging
    depends_on:
      - db
    volumes:
      - .:/pbp_challenge_backend_db
      - static_volume:/app/static
      - csv_volume:/app/media/csv
    networks:
      -  pbp_challenge_backend_network

  nginx:
    image: nginx:latest
    container_name: pbp_challenge_backend_nginx
    restart: unless-stopped
    ports:
      - "4020:80"
    depends_on:
      - app
    volumes:
      - ./docker/nginx/conf.d/:/etc/nginx/conf.d/
      - static_volume:/app/static
    networks:
      - pbp_challenge_backend_network

  db:
    image: postgres:12
    container_name: pbp_challenge_backend_db
    restart: on-failure
    environment:
      - POSTGRES_DB=pbp_challenge_db
      - POSTGRES_USER=root
      - POSTGRES_PASSWORD=306d33acef676892be36fbb46ca63f66
    ports:
      - "5434:5432"
    volumes:
      - pbp_challenge_database_volume:/var/lib/postgresql/data
    networks:
      - pbp_challenge_backend_network

  redis:
    image: redis
    container_name: pbp_challenge_backend_redis
    restart: on-failure
    ports:
      - "6380:6379"
    networks:
      - pbp_challenge_backend_network

  celery:
    image: *app
    container_name: pbp_challenge_backend_celery
    restart: on-failure
    command: ./wait-for-it.sh redis:6380 -- celery -A pbp_challenge worker -l info
    env_file:
      - ./.env.staging
    depends_on:
      - app
      - redis
    volumes:
      - .:/celery_volume
      - csv_volume:/app/media/csv
    networks:
      - pbp_challenge_backend_network


networks:
  pbp_challenge_backend_network:
    driver: bridge

volumes:
  static_volume:
  celery_volume:
  csv_volume:
  pbp_challenge_database_volume:
